<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <title>Grafico</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>
<body>
  <nav>
	<h4>LORAWAN</h4>
	<ul>
		<li><a href="/logged">Pagina Inicial</a></li>
		<li><a href="/sensors">Meus Sensores</a></li>
		<li><a href="/locals">Locais</a></li>
		<li><a href="/logout">Log Out</a></li>
	</ul>
</nav>

  <h1>Grafico de Temperatura e Humidade do sensor {{this.sensorname}}</h1>


  <div>
    <canvas id="sensorChart"></canvas>
  </div>

   <div class="d-flex justify-content-center mt-3">
    <!-- Filtros do gráfico -->
    <div class="mx-2">
      <label for="dateFilter">Selecionar Data:</label>
      <input type="text" id="dateFilter" placeholder="Select a date">
    </div>

    <div class="mx-2">
      <label for="startHour">Hora de Inicio:</label>
      <input type="text" id="startHour" placeholder="HH:mm">
    </div>
    <div class="mx-2">
      <label for="endHour">Hora do Fim:</label>
      <input type="text" id="endHour" placeholder="HH:mm">
    </div>
    <button onclick="filterData()" class="submit">Filtrar</button>
  </div>

  <!-- Botão de exportação -->
  <div class="d-flex justify-content-center mt-3">
    <button onclick="exportData()" class="submit">Exportar Dados(JSON)</button>
  </div>
  

   <script>
   let allTemperatures = {{{temperatures}}};
    let allHumidities = {{{humidities}}};

    // Obtenha o contexto do canvas
    const ctx = document.getElementById('sensorChart').getContext('2d');

    // Crie o gráfico
    let sensorChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: allTemperatures.map(reading => {
          const createdAt = new Date(reading.createdAt);
          const formattedDate = formatDateForChart(createdAt); // Usar a função para o gráfico
          return formattedDate;
        }),
        datasets: [
          {
            label: 'Temperature (ºC)',
            data: allTemperatures.map(reading => reading.temperature),
            borderColor: 'red',
            fill: false
          },
          {
            label: 'Humidity (%)',
            data: allHumidities.map(reading => reading.humidity),
            borderColor: 'blue',
            fill: false
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: 'Data'
            }
          },
          y: {
            display: true,
            title: {
              display: true,
              text: 'Valor Temperatura e Humidade'
            }
          }
        }
      }
    });

   const datePicker = flatpickr("#dateFilter", {
      dateFormat: "d/m/Y", // Formato para a parte de selecionar a data
      enableTime: false, // Desativar a seleção de hora
      onValueUpdate: function(selectedDates, dateStr, instance) {
        // Obter a data selecionada
        const selectedDate = new Date(selectedDates[0]);
        const formattedDate = formatDate(selectedDate); // Formatar a data
        instance.input.value = formattedDate; // Definir o valor do campo de entrada
      }
    });


    const startTimePicker = flatpickr("#startHour", {
      enableTime: true,
      noCalendar: true,
      dateFormat: "H:i",
    });

    const endTimePicker = flatpickr("#endHour", {
      enableTime: true,
      noCalendar: true,
      dateFormat: "H:i",
    });

    function filterData() {
      const selectedDate = getDateFromInput(document.getElementById('dateFilter').value);

      const startHourInput = startTimePicker.input.value;
      const endHourInput = endTimePicker.input.value;

      const [startHour, startMinute] = startHourInput.split(':').map(Number);
      const [endHour, endMinute] = endHourInput.split(':').map(Number);

      // Filtrar as leituras com base na data selecionada, hora de início e hora de fim
      const filteredTemperatures = allTemperatures.filter(reading => {
        const createdAt = new Date(reading.createdAt);
        const hour = createdAt.getHours();
        const minute = createdAt.getMinutes();
        const readingDate = createdAt.toDateString();

        const isSameDate = readingDate === selectedDate.toDateString();
        const isAfterStartHour = hour > startHour || (hour === startHour && minute >= startMinute);
        const isBeforeEndHour = hour < endHour || (hour === endHour && minute <= endMinute);

        return isSameDate && isAfterStartHour && isBeforeEndHour;
      });

      const filteredHumidities = allHumidities.filter(reading => {
        const createdAt = new Date(reading.createdAt);
        const hour = createdAt.getHours();
        const minute = createdAt.getMinutes();
        const readingDate = createdAt.toDateString();

        const isSameDate = readingDate === selectedDate.toDateString();
        const isAfterStartHour = hour > startHour || (hour === startHour && minute >= startMinute);
        const isBeforeEndHour = hour < endHour || (hour === endHour && minute <= endMinute);

        return isSameDate && isAfterStartHour && isBeforeEndHour;
      });

      // Atualizar o gráfico com as leituras filtradas
      updateChart(filteredTemperatures, filteredHumidities);
    }

    function updateChart(temperatures, humidities) {
      sensorChart.data.labels = temperatures.map(reading => {
        const createdAt = new Date(reading.createdAt);
        const formattedDate = formatDateForChart(createdAt); // Usar a função para o gráfico
        return formattedDate;
      });
      sensorChart.data.datasets[0].data = temperatures.map(reading => reading.temperature);
      sensorChart.data.datasets[1].data = humidities.map(reading => reading.humidity);
      sensorChart.update();
    }

    function formatDateForChart(date) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const hour = date.getHours().toString().padStart(2, '0');
      const minute = date.getMinutes().toString().padStart(2, '0');
      return `${day}/${month} - ${hour}:${minute}`;
    }

    function formatDate(date) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear().toString();
      return `${day}/${month}/${year}`;
    }

    function getDateFromInput(inputValue) {
      const [day, month, year] = inputValue.split('/').map(Number);
      return new Date(year, month - 1, day);
    }

    // Função para exportar os dados do gráfico em JSON
    function exportData() {
      const data = {
        labels: sensorChart.data.labels,
        datasets: sensorChart.data.datasets.map(dataset => {
          return {
            label: dataset.label,
            data: dataset.data
          };
        })
      };

      // Crie um objeto Blob para o JSON exportado
      const blob = new Blob([JSON.stringify(data)], { type: "application/json" });

      // Crie um link para download e defina o nome do arquivo
      const a = document.createElement("a");
      const url = URL.createObjectURL(blob);
      a.href = url;
      a.download = "sensor_data.json";

      // Adicione o link ao DOM e clique nele para iniciar o download
      document.body.appendChild(a);
      a.click();

      // Remova o link e revogue a URL do objeto Blob
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

  </script>
</body>
</html>
